Pirate.h

#pragma once
#include <string>
#include <iomanip>
#include <iostream>
using namespace std;

class Pirate
{
private:
	//attributes
	string name;

public:
	//constructor and destructor
	Pirate(void);
	Pirate(string name);
	~Pirate(void);


	//behaviors
	virtual string speak(void);
	virtual string toString(void);

	//accessor and mutators
	string getName(void);
	void setName(string name);

};

Pirate.cpp

#include "Pirate.h"

Pirate::Pirate(void)
{
	name = "unknown";
}

Pirate::Pirate(string name)
{
	setName(name);
}

Pirate::~Pirate()
{

}


//behaviors
string Pirate::speak(void)
{
	return " ";
}

string Pirate::toString(void)
{
	return " ";
}

//accessor and mutators
string Pirate::getName(void)
{
	return name;
}

void Pirate::setName(string name)
{
	if (name.length() > 0)
		this->name = name;
	else
		this->name = "unknown";
}

CaptainPirate.h

#pragma once
#include <string>
#include "Pirate.h"
using namespace std;

class CaptainPirate : public Pirate
{
private:
	//attributes
	string pet;

public:
	//constructor and destructor
	CaptainPirate(void);
	CaptainPirate(string name, string pet);
	~CaptainPirate(void);

	//behaviors
	string speak(void);
	string toString(void);

	//accessor and mutators
	string getPet(void);
	void setPet(string pet);

};

CaptainPirate.cpp

#include "CaptainPirate.h"

CaptainPirate::CaptainPirate(void) : Pirate()
{
	pet = "unknown";
}

CaptainPirate::CaptainPirate(string name, string pet)
	: Pirate(name)
{
	setPet(pet);
}

CaptainPirate::~CaptainPirate(void)
{

}

//behaviors
string CaptainPirate::speak(void)
{
	return "This your Capitan and pet " + pet + "!\n Raise the anchor and host the sail.\n We be heading out to sea."; //yes Capitan is mispelled on purpose
}

string CaptainPirate::toString(void)
{
	return ", Pet: " + pet;
}

//accessor and mutators
string CaptainPirate::getPet(void)
{
	return pet;
}

void CaptainPirate::setPet(string pet)
{
	if (pet.length() > 0)
		this->pet = pet;
	else
		this->pet = "unknown";
}

ZombiePirate.h

#pragma once
#include <string>
#include "Pirate.h"
using namespace std;

class ZombiePirate : public Pirate
{
private:
	//attributes
	short brainHunger;

public:
	//constructor and destructor
	ZombiePirate(void);
	ZombiePirate(string name, short brainHunger);
	~ZombiePirate(void);

	//behaviors
	string speak(void);
	string toString(void);

	//accessor and mutators
	short getBrainHunger(void);
	void setBrainHunger(short brainHunger);

};

ZombiePirate.cpp

#include "ZombiePirate.h"

ZombiePirate::ZombiePirate(void) : Pirate()
{
	brainHunger = 0;
}

ZombiePirate::ZombiePirate(string name, short brainHunger)
	: Pirate(name)
{
	setBrainHunger(brainHunger);
}

ZombiePirate::~ZombiePirate(void)
{

}

//behaviors
string ZombiePirate::speak(void)
{
		
	//say something based on hunger level
	switch (brainHunger)
	{
	case 0:
		return "Yum. I just ate a brain!";
		break;
	case 1:
		return "I'm getting a little hungry...Are there any brains out there?";
		break;
	case 2:
		return "I need just a snack...Can I have just one bite of brain?";
		break;
	case 3:
		return "I'm getting very hungry!!! I need a brain to eat!";
		break;
	case 4:
		return "Then just half...I'll take just half a brain";
		break;
	case 5:
		return "BRAINS!!! GIVE ME BRAINS NOW!!! I NEED TO EAT BRAINS NOW";
		break;
	default:
		return "Error. Something went wrong";
	}
}

string ZombiePirate::toString(void)
{
	return ", brainHunger: " + brainHunger;
}

//accessor and mutators
short ZombiePirate::getBrainHunger(void)
{
	return brainHunger;
}

void ZombiePirate::setBrainHunger(short brainHunger)
{
	if (brainHunger > 0 && brainHunger < 7)
		this->brainHunger = brainHunger;
	else
		this->brainHunger = 0;
}

Main.cpp

#include <iostream>
#include <conio.h>
#include <string>
#include <iomanip>
#include "Pirate.h"
#include "CaptainPirate.h"
#include "ZombiePirate.h"
using namespace std;

//prototype
void displayPirate(Pirate* ptrPirate);

/// Entry point to application
int main()
{

    // check for memory leaks
#if defined(DEBUG) | defined(_DEBUG)
    _CrtSetDbgFlag(_CRTDBG_ALLOC_MEM_DF | _CRTDBG_LEAK_CHECK_DF);
#endif

    //Create some objects
    Pirate* pirates[3];
    pirates[0] = new CaptainPirate("Jack", "Parrot");
    pirates[1] = new ZombiePirate("DeadHead", 1);
    pirates[2] = new Pirate;

    //Display the pirate speaks
    for (int i = 0; i < 3; i++)
    {
        cout << pirates[i]->speak() << endl;
        displayPirate(pirates[i]);
    }

    //Pause
    cout << "\nPress any key to continue...";

    _getch();

    return 0;
}

void displayPirate(Pirate* ptrPirate)
{
    //get child specific values
    //check to see if it is a child
    CaptainPirate* cp = dynamic_cast<CaptainPirate*>(ptrPirate);
    if (cp != NULL)
    {
        cout << "Pet: " << cp->getPet() << endl;
    }

    ZombiePirate* zp = dynamic_cast<ZombiePirate*>(ptrPirate);
    if (zp != NULL)
    {
        cout << "brainHunger: " << zp->speak() << endl;
    }

    cout << endl;
}
